# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc

# Import models
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load dataset
df = pd.read_csv("data.csv")

# Remove unnamed columns (fix CSV formatting issues)
df = df.loc[:, ~df.columns.str.contains('^Unnamed')]

# Display dataset info
print(df.info())

# Check for missing values
print("\nMissing Values Before Handling:")
print(df.isnull().sum())

# Handle missing values
df.dropna(inplace=True)  # Drop rows with missing values

# Verify missing values are handled
print("\nMissing Values After Handling:")
print(df.isnull().sum())

# Encode categorical target variable (Benign=0, Malignant=1)
le = LabelEncoder()
df['diagnosis'] = le.fit_transform(df['diagnosis'])

# Define features (X) and target (y)
X = df.drop(columns=['diagnosis'])  # Exclude the target column
y = df['diagnosis']

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset into training (80%) and testing (20%)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)


# Initialize models dictionary with ANN included
models = {
    "Decision Tree": DecisionTreeClassifier(),
    "Logistic Regression": LogisticRegression(),
    "SVM": SVC(probability=True),
    "Random Forest": RandomForestClassifier(),
    "Naive Bayes": GaussianNB(),
    "KNN": KNeighborsClassifier(),
    "ANN": Sequential([
        Dense(16, activation='relu', input_shape=(X_train.shape[1],)),
        Dense(8, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
}
